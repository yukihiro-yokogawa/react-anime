{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\environment\\\\react-workspace\\\\react-anime\\\\src\\\\container\\\\Anime.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Button from '~/component/Button';\nimport createPeriods from '~/util/createPeriod';\nimport { getAnnimeAsync } from '../ducks/anime/slice';\nimport Detail from '~/component/Detail';\nimport { useAnimeState } from '~/ducks/anime/selectors';\nconst date = new Date();\n\nconst SeasonList = () => {\n  const dispatch = useDispatch();\n  const buttonList = [];\n  const {\n    0: animeInfo,\n    1: setAnimeInfo\n  } = useState({\n    year: date.getFullYear(),\n    period: createPeriods(date.getMonth() + 1),\n    seasons: [{\n      season: '冬',\n      period: 4\n    }, {\n      season: '秋',\n      period: 3\n    }, {\n      season: '夏',\n      period: 2\n    }, {\n      season: '春',\n      period: 1\n    }]\n  });\n\n  const getDefaultAnimeList = () => {\n    dispatch(getAnnimeAsync(date.getFullYear(), createPeriods(date.getMonth() + 1)));\n  };\n\n  const handleClickSetSeason = (year, period) => {\n    setAnimeInfo(_objectSpread(_objectSpread({}, animeInfo), {}, {\n      year: year,\n      period: period\n    }));\n  };\n\n  for (let i = date.getFullYear(); 2014 <= i; i--) {\n    animeInfo.seasons.map(season => {\n      buttonList.push( /*#__PURE__*/_jsxDEV(Button, {\n        year: i,\n        season: season.season,\n        period: season.period,\n        handleClick: (year, period) => handleClickSetSeason(year, period)\n      }, `${i} ${season.period}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }, this));\n    });\n  }\n\n  useEffect(() => {\n    dispatch(getAnnimeAsync(animeInfo.year, animeInfo.period));\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      onLoad: getDefaultAnimeList,\n      children: buttonList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Detail, {\n        animeInfo: useAnimeState().store\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\nexport default SeasonList;","map":{"version":3,"sources":["E:/environment/react-workspace/react-anime/src/container/Anime.tsx"],"names":["React","useState","useEffect","useDispatch","Button","createPeriods","getAnnimeAsync","Detail","useAnimeState","date","Date","SeasonList","dispatch","buttonList","animeInfo","setAnimeInfo","year","getFullYear","period","getMonth","seasons","season","getDefaultAnimeList","handleClickSetSeason","i","map","push","store"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAASC,aAAT,QAA8B,yBAA9B;AAEA,MAAMC,IAAI,GAAG,IAAIC,IAAJ,EAAb;;AAEA,MAAMC,UAAU,GAAG,MAAmB;AACrC,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AAEA,QAAMU,UAAU,GAAG,EAAnB;AAEA,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4Bd,QAAQ,CAAC;AAC1Ce,IAAAA,IAAI,EAAEP,IAAI,CAACQ,WAAL,EADoC;AAE1CC,IAAAA,MAAM,EAAEb,aAAa,CAACI,IAAI,CAACU,QAAL,KAAkB,CAAnB,CAFqB;AAG1CC,IAAAA,OAAO,EAAE,CACR;AACCC,MAAAA,MAAM,EAAE,GADT;AAECH,MAAAA,MAAM,EAAE;AAFT,KADQ,EAKR;AACCG,MAAAA,MAAM,EAAE,GADT;AAECH,MAAAA,MAAM,EAAE;AAFT,KALQ,EASR;AACCG,MAAAA,MAAM,EAAE,GADT;AAECH,MAAAA,MAAM,EAAE;AAFT,KATQ,EAaR;AACCG,MAAAA,MAAM,EAAE,GADT;AAECH,MAAAA,MAAM,EAAE;AAFT,KAbQ;AAHiC,GAAD,CAA1C;;AAuBA,QAAMI,mBAAmB,GAAG,MAAM;AACjCV,IAAAA,QAAQ,CAACN,cAAc,CAACG,IAAI,CAACQ,WAAL,EAAD,EAAqBZ,aAAa,CAACI,IAAI,CAACU,QAAL,KAAkB,CAAnB,CAAlC,CAAf,CAAR;AACA,GAFD;;AAIA,QAAMI,oBAAoB,GAAG,CAACP,IAAD,EAAeE,MAAf,KAAkC;AAC9DH,IAAAA,YAAY,iCACRD,SADQ;AAEXE,MAAAA,IAAI,EAAEA,IAFK;AAGXE,MAAAA,MAAM,EAAEA;AAHG,OAAZ;AAKA,GAND;;AAQA,OAAK,IAAIM,CAAC,GAAGf,IAAI,CAACQ,WAAL,EAAb,EAAiC,QAAQO,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD;AAChDV,IAAAA,SAAS,CAACM,OAAV,CAAkBK,GAAlB,CAAuBJ,MAAD,IAAY;AACjCR,MAAAA,UAAU,CAACa,IAAX,eACC,QAAC,MAAD;AAEC,QAAA,IAAI,EAAEF,CAFP;AAGC,QAAA,MAAM,EAAEH,MAAM,CAACA,MAHhB;AAIC,QAAA,MAAM,EAAEA,MAAM,CAACH,MAJhB;AAKC,QAAA,WAAW,EAAE,CAACF,IAAD,EAAeE,MAAf,KAAkCK,oBAAoB,CAACP,IAAD,EAAOE,MAAP;AALpE,SACO,GAAEM,CAAE,IAAGH,MAAM,CAACH,MAAO,EAD5B;AAAA;AAAA;AAAA;AAAA,cADD;AASA,KAVD;AAWA;;AAEDhB,EAAAA,SAAS,CAAC,MAAM;AACfU,IAAAA,QAAQ,CAACN,cAAc,CAACQ,SAAS,CAACE,IAAX,EAAiBF,SAAS,CAACI,MAA3B,CAAf,CAAR;AACA,GAFQ,CAAT;AAIA,sBACC;AAAA,4BACC;AAAK,MAAA,MAAM,EAAEI,mBAAb;AAAA,gBAAmCT;AAAnC;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAA,6BACC,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAEL,aAAa,GAAGmB;AAAnC;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA,kBADD;AAQA,CAlED;;AAoEA,eAAehB,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport Button from '~/component/Button';\r\nimport createPeriods from '~/util/createPeriod';\r\nimport { getAnnimeAsync } from '../ducks/anime/slice';\r\nimport Detail from '~/component/Detail';\r\nimport { useAnimeState } from '~/ducks/anime/selectors';\r\n\r\nconst date = new Date();\r\n\r\nconst SeasonList = (): JSX.Element => {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst buttonList = [];\r\n\r\n\tconst [animeInfo, setAnimeInfo] = useState({\r\n\t\tyear: date.getFullYear(),\r\n\t\tperiod: createPeriods(date.getMonth() + 1),\r\n\t\tseasons: [\r\n\t\t\t{\r\n\t\t\t\tseason: '冬',\r\n\t\t\t\tperiod: 4,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tseason: '秋',\r\n\t\t\t\tperiod: 3,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tseason: '夏',\r\n\t\t\t\tperiod: 2,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tseason: '春',\r\n\t\t\t\tperiod: 1,\r\n\t\t\t},\r\n\t\t],\r\n\t});\r\n\r\n\tconst getDefaultAnimeList = () => {\r\n\t\tdispatch(getAnnimeAsync(date.getFullYear(), createPeriods(date.getMonth() + 1)));\r\n\t};\r\n\r\n\tconst handleClickSetSeason = (year: number, period: number) => {\r\n\t\tsetAnimeInfo({\r\n\t\t\t...animeInfo,\r\n\t\t\tyear: year,\r\n\t\t\tperiod: period,\r\n\t\t});\r\n\t};\r\n\r\n\tfor (let i = date.getFullYear(); 2014 <= i; i--) {\r\n\t\tanimeInfo.seasons.map((season) => {\r\n\t\t\tbuttonList.push(\r\n\t\t\t\t<Button\r\n\t\t\t\t\tkey={`${i} ${season.period}`}\r\n\t\t\t\t\tyear={i}\r\n\t\t\t\t\tseason={season.season}\r\n\t\t\t\t\tperiod={season.period}\r\n\t\t\t\t\thandleClick={(year: number, period: number) => handleClickSetSeason(year, period)}\r\n\t\t\t\t></Button>,\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(getAnnimeAsync(animeInfo.year, animeInfo.period));\r\n\t});\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div onLoad={getDefaultAnimeList}>{buttonList}</div>\r\n\t\t\t<div>\r\n\t\t\t\t<Detail animeInfo={useAnimeState().store}></Detail>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default SeasonList;\r\n"]},"metadata":{},"sourceType":"module"}