{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { combineReducers } from 'redux';\nimport logger from 'redux-logger';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport animeInfoSlice, { initialState as animeInfoState } from './anime/slice';\nvar rootReducer = combineReducers({\n  anime: animeInfoSlice.reducer\n});\n\nvar preloadedState = function preloadedState() {\n  return {\n    anime: animeInfoState\n  };\n};\n\nvar createStore = function createStore() {\n  var middlewareList = [].concat(_toConsumableArray(getDefaultMiddleware()), [logger]);\n  return configureStore({\n    reducer: rootReducer,\n    middleware: middlewareList,\n    devTools: true,\n    preloadedState: preloadedState()\n  });\n};\n\nexport default createStore;","map":{"version":3,"sources":["E:/environment/react-workspace/react-anime/src/ducks/createStore.ts"],"names":["combineReducers","logger","configureStore","getDefaultMiddleware","animeInfoSlice","initialState","animeInfoState","rootReducer","anime","reducer","preloadedState","createStore","middlewareList","middleware","devTools"],"mappings":";AAAA,SAAgBA,eAAhB,QAAuC,OAAvC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,cAAT,EAAyBC,oBAAzB,QAAqD,kBAArD;AACA,OAAOC,cAAP,IAAyBC,YAAY,IAAIC,cAAzC,QAA+D,eAA/D;AAEA,IAAMC,WAAW,GAAGP,eAAe,CAAC;AACnCQ,EAAAA,KAAK,EAAEJ,cAAc,CAACK;AADa,CAAD,CAAnC;;AAIA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC5B,SAAO;AAAEF,IAAAA,KAAK,EAAEF;AAAT,GAAP;AACA,CAFD;;AAQA,IAAMK,WAAW,GAAG,SAAdA,WAAc,GAAM;AACzB,MAAMC,cAAc,gCAAOT,oBAAoB,EAA3B,IAA+BF,MAA/B,EAApB;AACA,SAAOC,cAAc,CAAC;AACrBO,IAAAA,OAAO,EAAEF,WADY;AAErBM,IAAAA,UAAU,EAAED,cAFS;AAGrBE,IAAAA,QAAQ,MAHa;AAIrBJ,IAAAA,cAAc,EAAEA,cAAc;AAJT,GAAD,CAArB;AAMA,CARD;;AAUA,eAAeC,WAAf","sourcesContent":["import { Store, combineReducers } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport animeInfoSlice, { initialState as animeInfoState } from './anime/slice';\r\n\r\nconst rootReducer = combineReducers({\r\n\tanime: animeInfoSlice.reducer,\r\n});\r\n\r\nconst preloadedState = () => {\r\n\treturn { anime: animeInfoState };\r\n};\r\n\r\nexport type StoreState = ReturnType<typeof preloadedState>;\r\n\r\nexport type ReduxStore = Store<StoreState>;\r\n\r\nconst createStore = () => {\r\n\tconst middlewareList = [...getDefaultMiddleware(), logger];\r\n\treturn configureStore({\r\n\t\treducer: rootReducer,\r\n\t\tmiddleware: middlewareList,\r\n\t\tdevTools: process.env.NODE_ENV !== 'production',\r\n\t\tpreloadedState: preloadedState(),\r\n\t});\r\n};\r\n\r\nexport default createStore;\r\n"]},"metadata":{},"sourceType":"module"}