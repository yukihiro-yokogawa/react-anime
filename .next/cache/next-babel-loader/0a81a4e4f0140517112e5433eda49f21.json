{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\environment\\\\react-workspace\\\\react-anime\\\\src\\\\container\\\\Detail.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { useAnimeState } from '../ducks/anime/selectors';\n\nconst Detail = () => {\n  const {\n    0: animeList,\n    1: setAnimeList\n  } = useState(useAnimeState);\n  useEffect(() => {\n    console.log('test' + animeList);\n    setAnimeList(_objectSpread({}, animeList));\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n\nexport default Detail;","map":{"version":3,"sources":["E:/environment/react-workspace/react-anime/src/container/Detail.tsx"],"names":["React","useState","useEffect","useAnimeState","Detail","animeList","setAnimeList","console","log"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAT,QAA8B,0BAA9B;;AAEA,MAAMC,MAAM,GAAG,MAAmB;AACjC,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BL,QAAQ,CAACE,aAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACfK,IAAAA,OAAO,CAACC,GAAR,CAAY,SAASH,SAArB;AACAC,IAAAA,YAAY,mBACRD,SADQ,EAAZ;AAGA,GALQ,CAAT;AAOA,sBACC;AAAA,2BACC;AAAA;AAAA;AAAA;AAAA;AADD,mBADD;AAKA,CAfD;;AAiBA,eAAeD,MAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useAnimeState } from '../ducks/anime/selectors';\r\n\r\nconst Detail = (): JSX.Element => {\r\n\tconst [animeList, setAnimeList] = useState(useAnimeState);\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log('test' + animeList);\r\n\t\tsetAnimeList({\r\n\t\t\t...animeList,\r\n\t\t});\r\n\t});\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div></div>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Detail;\r\n"]},"metadata":{},"sourceType":"module"}