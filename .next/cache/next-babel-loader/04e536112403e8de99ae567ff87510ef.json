{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const initialState = {\n  items: {\n    id: null,\n    title: '',\n    title_short1: '',\n    title_short2: '',\n    title_short3: '',\n    public_url: '',\n    twitter_account: '',\n    twitter_hash_tag: '',\n    cours_id: null,\n    created_at: '',\n    updated_at: '',\n    sex: null,\n    sequel: null,\n    city_code: null,\n    city_name: '',\n    product_companies: 'null'\n  },\n  loading: true,\n  error: null\n};\nconst animeInfoSlice = createSlice({\n  name: 'anime',\n  initialState,\n  reducers: {\n    getAnnimeRequest: (state, action) => _objectSpread({}, state.items = action.payload),\n    getAnnimeFailure: (state, action) => _objectSpread({}, state)\n  }\n});\nexport const {\n  getAnnimeRequest\n} = animeInfoSlice.actions;\nexport default animeInfoSlice;\nexport const getAnnimeAsync = (year, season) => async dispatch => {\n  const response = await axios.get(`http://api.moemoe.tokyo/anime/v1/master/${year}/${season}`).then(response => {\n    dispatch(animeInfoSlice.actions.getAnnimeRequest(response.data));\n  });\n  console.log(response);\n};","map":{"version":3,"sources":["E:/environment/react-workspace/react-anime/src/ducks/anime/slice.ts"],"names":["createSlice","axios","initialState","items","id","title","title_short1","title_short2","title_short3","public_url","twitter_account","twitter_hash_tag","cours_id","created_at","updated_at","sex","sequel","city_code","city_name","product_companies","loading","error","animeInfoSlice","name","reducers","getAnnimeRequest","state","action","payload","getAnnimeFailure","actions","getAnnimeAsync","year","season","dispatch","response","get","then","data","console","log"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,OAAO,MAAMC,YAA0B,GAAG;AACzCC,EAAAA,KAAK,EAAE;AACNC,IAAAA,EAAE,EAAE,IADE;AAENC,IAAAA,KAAK,EAAE,EAFD;AAGNC,IAAAA,YAAY,EAAE,EAHR;AAINC,IAAAA,YAAY,EAAE,EAJR;AAKNC,IAAAA,YAAY,EAAE,EALR;AAMNC,IAAAA,UAAU,EAAE,EANN;AAONC,IAAAA,eAAe,EAAE,EAPX;AAQNC,IAAAA,gBAAgB,EAAE,EARZ;AASNC,IAAAA,QAAQ,EAAE,IATJ;AAUNC,IAAAA,UAAU,EAAE,EAVN;AAWNC,IAAAA,UAAU,EAAE,EAXN;AAYNC,IAAAA,GAAG,EAAE,IAZC;AAaNC,IAAAA,MAAM,EAAE,IAbF;AAcNC,IAAAA,SAAS,EAAE,IAdL;AAeNC,IAAAA,SAAS,EAAE,EAfL;AAgBNC,IAAAA,iBAAiB,EAAE;AAhBb,GADkC;AAmBzCC,EAAAA,OAAO,EAAE,IAnBgC;AAoBzCC,EAAAA,KAAK,EAAE;AApBkC,CAAnC;AAuBP,MAAMC,cAAc,GAAGtB,WAAW,CAAC;AAClCuB,EAAAA,IAAI,EAAE,OAD4B;AAElCrB,EAAAA,YAFkC;AAGlCsB,EAAAA,QAAQ,EAAE;AACTC,IAAAA,gBAAgB,EAAE,CAACC,KAAD,EAAQC,MAAR,uBACbD,KAAK,CAACvB,KAAN,GAAcwB,MAAM,CAACC,OADR,CADT;AAITC,IAAAA,gBAAgB,EAAE,CAACH,KAAD,EAAQC,MAAR,uBACdD,KADc;AAJT;AAHwB,CAAD,CAAlC;AAaA,OAAO,MAAM;AAAED,EAAAA;AAAF,IAAuBH,cAAc,CAACQ,OAA5C;AAEP,eAAeR,cAAf;AAEA,OAAO,MAAMS,cAAc,GAAG,CAACC,IAAD,EAAeC,MAAf,KAAkC,MAAOC,QAAP,IAAoE;AACnI,QAAMC,QAAQ,GAAG,MAAMlC,KAAK,CAACmC,GAAN,CAAW,2CAA0CJ,IAAK,IAAGC,MAAO,EAApE,EAAuEI,IAAvE,CAA6EF,QAAD,IAAc;AAChHD,IAAAA,QAAQ,CAACZ,cAAc,CAACQ,OAAf,CAAuBL,gBAAvB,CAAwCU,QAAQ,CAACG,IAAjD,CAAD,CAAR;AACA,GAFsB,CAAvB;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACA,CALM","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { NetworkState } from '../../type/type';\r\n\r\nexport const initialState: NetworkState = {\r\n\titems: {\r\n\t\tid: null,\r\n\t\ttitle: '',\r\n\t\ttitle_short1: '',\r\n\t\ttitle_short2: '',\r\n\t\ttitle_short3: '',\r\n\t\tpublic_url: '',\r\n\t\ttwitter_account: '',\r\n\t\ttwitter_hash_tag: '',\r\n\t\tcours_id: null,\r\n\t\tcreated_at: '',\r\n\t\tupdated_at: '',\r\n\t\tsex: null,\r\n\t\tsequel: null,\r\n\t\tcity_code: null,\r\n\t\tcity_name: '',\r\n\t\tproduct_companies: 'null',\r\n\t},\r\n\tloading: true,\r\n\terror: null,\r\n};\r\n\r\nconst animeInfoSlice = createSlice({\r\n\tname: 'anime',\r\n\tinitialState,\r\n\treducers: {\r\n\t\tgetAnnimeRequest: (state, action) => ({\r\n\t\t\t...(state.items = action.payload),\r\n\t\t}),\r\n\t\tgetAnnimeFailure: (state, action) => ({\r\n\t\t\t...state,\r\n\t\t}),\r\n\t},\r\n});\r\n\r\nexport const { getAnnimeRequest } = animeInfoSlice.actions;\r\n\r\nexport default animeInfoSlice;\r\n\r\nexport const getAnnimeAsync = (year: number, season: number) => async (dispatch: (arg0: { payload: any; type: string }) => void) => {\r\n\tconst response = await axios.get(`http://api.moemoe.tokyo/anime/v1/master/${year}/${season}`).then((response) => {\r\n\t\tdispatch(animeInfoSlice.actions.getAnnimeRequest(response.data));\r\n\t});\r\n\tconsole.log(response);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}