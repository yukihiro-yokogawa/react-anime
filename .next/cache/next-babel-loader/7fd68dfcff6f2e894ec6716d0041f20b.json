{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst date = new Date();\nexport const initialState = {\n  items: [{\n    year: null,\n    period: null,\n    animeList: getDefaultAnnimeAsync(2020, 2)\n  }],\n  loading: true,\n  error: null\n};\nconst animeInfoSlice = createSlice({\n  name: 'anime',\n  initialState,\n  reducers: {\n    getDefaultAnnimeRequest: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n      items: action.payload\n    }),\n\n    getAnnimeRequest(state, action) {\n      state.items.push(action.payload);\n    },\n\n    getAnnimeFailure: (state, action) => _objectSpread({}, state)\n  }\n});\nexport const {\n  getAnnimeRequest\n} = animeInfoSlice.actions;\nexport default animeInfoSlice;\nexport const getDefaultAnnimeAsync = (year, season) => async dispatch => {\n  await axios.get(`http://api.moemoe.tokyo/anime/v1/master/${year}/${season}`).then(response => {\n    const items = response.data;\n    dispatch(getDefaultAnnimeRequest);\n  });\n};","map":{"version":3,"sources":["E:/environment/react-workspace/react-anime/src/ducks/anime/slice.ts"],"names":["createSlice","axios","date","Date","initialState","items","year","period","animeList","getDefaultAnnimeAsync","loading","error","animeInfoSlice","name","reducers","getDefaultAnnimeRequest","state","action","payload","getAnnimeRequest","push","getAnnimeFailure","actions","season","dispatch","get","then","response","data"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,MAAMC,IAAI,GAAG,IAAIC,IAAJ,EAAb;AAEA,OAAO,MAAMC,YAA0B,GAAG;AACzCC,EAAAA,KAAK,EAAE,CACN;AACCC,IAAAA,IAAI,EAAE,IADP;AAECC,IAAAA,MAAM,EAAE,IAFT;AAGCC,IAAAA,SAAS,EAAEC,qBAAqB,CAAC,IAAD,EAAO,CAAP;AAHjC,GADM,CADkC;AAQzCC,EAAAA,OAAO,EAAE,IARgC;AASzCC,EAAAA,KAAK,EAAE;AATkC,CAAnC;AAYP,MAAMC,cAAc,GAAGZ,WAAW,CAAC;AAClCa,EAAAA,IAAI,EAAE,OAD4B;AAElCT,EAAAA,YAFkC;AAGlCU,EAAAA,QAAQ,EAAE;AACTC,IAAAA,uBAAuB,EAAE,CAACC,KAAD,EAAQC,MAAR,qCACrBD,KADqB;AAExBX,MAAAA,KAAK,EAAEY,MAAM,CAACC;AAFU,MADhB;;AAKTC,IAAAA,gBAAgB,CAACH,KAAD,EAAQC,MAAR,EAA4C;AAC3DD,MAAAA,KAAK,CAACX,KAAN,CAAYe,IAAZ,CAAiBH,MAAM,CAACC,OAAxB;AACA,KAPQ;;AAQTG,IAAAA,gBAAgB,EAAE,CAACL,KAAD,EAAQC,MAAR,uBACdD,KADc;AART;AAHwB,CAAD,CAAlC;AAiBA,OAAO,MAAM;AAAEG,EAAAA;AAAF,IAAuBP,cAAc,CAACU,OAA5C;AAEP,eAAeV,cAAf;AAEA,OAAO,MAAMH,qBAAqB,GAAG,CAACH,IAAD,EAAeiB,MAAf,KAAkC,MAAOC,QAAP,IAAoE;AAC1I,QAAMvB,KAAK,CAACwB,GAAN,CAAW,2CAA0CnB,IAAK,IAAGiB,MAAO,EAApE,EAAuEG,IAAvE,CAA6EC,QAAD,IAAc;AAC/F,UAAMtB,KAAqB,GAAGsB,QAAQ,CAACC,IAAvC;AACAJ,IAAAA,QAAQ,CAACT,uBAAD,CAAR;AACA,GAHK,CAAN;AAIA,CALM","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { NetworkState, SeasonState, AnimeInfoState } from '../../type/type';\r\n\r\nconst date = new Date();\r\n\r\nexport const initialState: NetworkState = {\r\n\titems: [\r\n\t\t{\r\n\t\t\tyear: null,\r\n\t\t\tperiod: null,\r\n\t\t\tanimeList: getDefaultAnnimeAsync(2020, 2),\r\n\t\t},\r\n\t],\r\n\tloading: true,\r\n\terror: null,\r\n};\r\n\r\nconst animeInfoSlice = createSlice({\r\n\tname: 'anime',\r\n\tinitialState,\r\n\treducers: {\r\n\t\tgetDefaultAnnimeRequest: (state, action: PayloadAction<Array<SeasonState>>) => ({\r\n\t\t\t...state,\r\n\t\t\titems: action.payload,\r\n\t\t}),\r\n\t\tgetAnnimeRequest(state, action: PayloadAction<SeasonState>) {\r\n\t\t\tstate.items.push(action.payload);\r\n\t\t},\r\n\t\tgetAnnimeFailure: (state, action) => ({\r\n\t\t\t...state,\r\n\t\t}),\r\n\t},\r\n});\r\n\r\nexport const { getAnnimeRequest } = animeInfoSlice.actions;\r\n\r\nexport default animeInfoSlice;\r\n\r\nexport const getDefaultAnnimeAsync = (year: number, season: number) => async (dispatch: (arg0: { payload: any; type: string }) => void) => {\r\n\tawait axios.get(`http://api.moemoe.tokyo/anime/v1/master/${year}/${season}`).then((response) => {\r\n\t\tconst items: AnimeInfoState = response.data;\r\n\t\tdispatch(getDefaultAnnimeRequest);\r\n\t});\r\n};\r\n"]},"metadata":{},"sourceType":"module"}